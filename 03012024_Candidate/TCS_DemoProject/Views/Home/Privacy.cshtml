@model List<Employee>

@{
    ViewData["Title"] = "NonFactorGrid";
}
<div class="text-center">
    <p>Using NonFactor Grid.</p>
</div>

<html>
<head>
    <link href="~/css/mvc-grid/mvc-grid.css" rel="stylesheet">
</head>
<body>

    @(Html
        .Grid(Model)
        .Build(columns =>
        {
            columns.Add(model => model.EmployeeId).Titled("EmpId");
            columns.Add(model => model.FirstName).Titled("FirstName");
            columns.Add(model => model.LastName).Titled("LastName");
            columns.Add(model => model.Address).Titled("Address");
            columns.Add(model => model.City).Titled("City");
            columns.Add(model => model.State).Titled("State");
            columns.Add(model => model.Country).Titled("Country");
            columns.Add(model => model.JobTitle.JobTitle1).Titled("Title");
            columns.Add(model => model.Department.Department1).Titled("Dept");
            columns.Add(model => model.Manager.ManagerFirstName).Titled("MgrFName");
            columns.Add(model => model.Manager.ManagerLastName).Titled("MgrLName");

        }).Using(GridFilterMode.Row)
        .Empty("No data found")
        .Sortable() // Enables sorting for not explicitly configured property expression columns.
        .Pageable(pager =>
        {
            pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 20, "20" }, { 40, "40" }, { 60, "60" }, { 80, "80" }, { 100, "100" } };
            pager.ShowPageSizes = true;
            pager.PagesToDisplay = 3;
            pager.CurrentPage = 1;
            pager.RowsPerPage = 20;
        })
        )

    <script src="~/js/mvc-grid/mvc-grid.js"></script>
    <script>
        document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
    </script>
</body>
</html>
